{"version":3,"sources":["../src/svg_annotate_ctrl.js"],"names":["MetricsPanelCtrl","_","kbn","TimeSeries","moment","SVGAnnotateCtrl","$scope","$injector","$rootScope","templateSrv","$sce","$http","$filter","panelDefaults","method","errorMode","params_js","legend","show","values","links","datasource","maxDataPoints","interval","targets","cacheTimeout","nullPointMode","legendType","aliasColors","format","valueName","imageUrl","metricMappings","span","defaults","panel","events","on","onInitEditMode","bind","onRender","onDataReceived","onDataError","onPanelInitalized","onRefresh","replaceSVGContents","series","addEditorTab","editorTabIndex","loadImage","map","serie","i","label","alias","data","stats","color","colors","dataList","seriesHandler","parseSeries","length","params","self","url","then","successCallback","response","html","updateContent","errorCallback","console","warn","body","$","id","e","content","trustAsHtml","valueMapping","value","labelMapping","roundedValue","toPrecision","seriesData","datapoints","target","flotpairs","getFlotPairs","templateUrl"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAQA,sB,kBAAAA,gB;;AACDC,O;;AACAC,S;;AACAC,gB;;AACAC,Y;;;;;;;;;;;;;;;;;;;;;iCAIMC,e;;;AACX;AACA,iCAAYC,MAAZ,EAAoBC,SAApB,EAA8BC,UAA9B,EAA0CC,WAA1C,EAAuDC,IAAvD,EAA6DC,KAA7D,EAAoEC,OAApE,EAA6E;AAAA;;AAAA,wIACrEN,MADqE,EAC7DC,SAD6D;;AAE3E,gBAAKC,UAAL,GAAkBA,UAAlB;;AAEA,cAAIK,gBAAgB;AAClBC,oBAAQ,KADU;AAElBC,uBAAW,MAFO;AAGlBC,uBAAW,QACA,uEADA,GAEA,mCAFA,GAGA,uBAHA,GAIA,GAPO;AAQlBC,oBAAQ;AACNC,oBAAM,IADA,EACM;AACZC,sBAAQ;AAFF,aARU;AAYlBC,mBAAO,EAZW;AAalBC,wBAAY,IAbM;AAclBC,2BAAe,CAdG;AAelBC,sBAAU,IAfQ;AAgBlBC,qBAAS,CAAC,EAAD,CAhBS;AAiBlBC,0BAAc,IAjBI;AAkBlBC,2BAAe,WAlBG;AAmBlBC,wBAAY,aAnBM;AAoBlBC,yBAAa,EApBK;AAqBlBC,oBAAQ,OArBU;AAsBlBC,uBAAW,SAtBO;AAuBlBC,sBAAS,EAvBS;AAwBlBC,4BAAe,EAxBG;AAyBlBC,kBAAK;AAzBa,WAApB;;AA4BA,gBAAKvB,IAAL,GAAYA,IAAZ;AACA,gBAAKC,KAAL,GAAaA,KAAb;AACA,gBAAKF,WAAL,GAAmBA,WAAnB;;AAEAR,YAAEiC,QAAF,CAAW,MAAKC,KAAhB,EAAuBtB,aAAvB;;AAEA,gBAAKuB,MAAL,CAAYC,EAAZ,CAAe,gBAAf,EAAiC,MAAKC,cAAL,CAAoBC,IAApB,OAAjC;AACA,gBAAKH,MAAL,CAAYC,EAAZ,CAAe,QAAf,EAAyB,MAAKG,QAAL,CAAcD,IAAd,OAAzB;AACA,gBAAKH,MAAL,CAAYC,EAAZ,CAAe,eAAf,EAAgC,MAAKI,cAAL,CAAoBF,IAApB,OAAhC;AACA,gBAAKH,MAAL,CAAYC,EAAZ,CAAe,YAAf,EAA6B,MAAKK,WAAL,CAAiBH,IAAjB,OAA7B;AACA,gBAAKH,MAAL,CAAYC,EAAZ,CAAe,mBAAf,EAAoC,MAAKM,iBAAL,CAAuBJ,IAAvB,OAApC;AACA,gBAAKH,MAAL,CAAYC,EAAZ,CAAe,SAAf,EAA0B,MAAKO,SAAL,CAAeL,IAAf,OAA1B;AA3C2E;AA4C5E;;;;sCAGU;AACT;AACA,iBAAKM,kBAAL;AACD;;;wCAEa;AAChB;AACI,iBAAKC,MAAL,GAAc,EAAd;AACA,iBAAKD,kBAAL;AACJ;AACG;;;2CAEgB;AACnB;AACI;AACA,iBAAKE,YAAL,CAAkB,SAAlB,EAA6B,uDAA7B,EAAqF,CAArF;AACA,iBAAKC,cAAL,GAAsB,CAAtB;AACD;;;8CAEmB;AACtB;AACI,iBAAKC,SAAL;AACD;;;qCAEU;AACb;AACI,iBAAKA,SAAL;AACA,iBAAKJ,kBAAL;AACD;;;sCAEWC,M,EAAQ;AAAA;;AAClB,mBAAO7C,EAAEiD,GAAF,CAAM,KAAKJ,MAAX,EAAmB,UAACK,KAAD,EAAQC,CAAR,EAAc;AACtC,qBAAO;AACLC,uBAAOF,MAAMG,KADR;AAELC,sBAAMJ,MAAMK,KAAN,CAAY,OAAKrB,KAAL,CAAWL,SAAvB,CAFD;AAGL2B,uBAAO,OAAKtB,KAAL,CAAWP,WAAX,CAAuBuB,MAAMG,KAA7B,KAAuC,OAAK9C,UAAL,CAAgBkD,MAAhB,CAAuBN,CAAvB;AAHzC,eAAP;AAKD,aANM,CAAP;AAOD;;;yCAGcO,Q,EAAU;AAC3B;AACA;;AAEI;AACA,iBAAKb,MAAL,GAAca,SAAST,GAAT,CAAa,KAAKU,aAAL,CAAmBrB,IAAnB,CAAwB,IAAxB,CAAb,CAAd;AACA,iBAAKgB,IAAL,GAAY,KAAKM,WAAL,CAAiB,KAAKf,MAAtB,CAAZ;;AAEA;AACA,gBAAG,KAAKX,KAAL,CAAWH,cAAX,CAA0B8B,MAA1B,IAAoC,KAAKP,IAAL,CAAUO,MAAjD,EAAwD;AACtD,mBAAK,IAAIV,IAAI,CAAb,EAAgBA,IAAI,KAAKG,IAAL,CAAUO,MAA9B,EAAsCV,GAAtC,EAA2C;AACzC,qBAAKjB,KAAL,CAAWH,cAAX,CAA0BoB,CAA1B,IAA+B,EAACC,OAAM,EAAP,EAAWE,MAAK,EAAhB,EAA/B;AACD;AACF;;AAED,iBAAKV,kBAAL;AACD;;;sCAEU;AACb;AACI;AACA,gBAAG,KAAKV,KAAL,CAAWJ,QAAd,EAAuB;;AAErB,kBAAIgC,MAAJ;AACA,kBAAIC,OAAO,IAAX;;AAEA,mBAAKrD,KAAL,CAAW;AACTG,wBAAQ,KADC;AAETmD,qBAAK,KAAK9B,KAAL,CAAWJ,QAFP;AAGTgC,wBAAQ;AAHC,eAAX,EAIGG,IAJH,CAIQ,SAASC,eAAT,CAAyBC,QAAzB,EAAmC;AACjD;AACA;AACQ,oBAAIC,OAAOD,SAASb,IAApB;;AAEAS,qBAAKM,aAAL,CAAoBD,IAApB;AACAL,qBAAKnB,kBAAL;AAED,eAZD,EAYG,SAAS0B,aAAT,CAAuBH,QAAvB,EAAiC;AAClCI,wBAAQC,IAAR,CAAa,OAAb,EAAsBL,QAAtB;AACA;AACA,oBAAIM,OAAO,mEAAX;AACAV,qBAAKM,aAAL,CAAmBI,IAAnB;AACD,eAjBD;AAmBD,aAxBD,MAyBI;AACF,mBAAKJ,aAAL,CAAmB,EAAnB;AACD;AACF;;;wCAEaD,I,EAAM;AACtB;AACA;AACI,gBAAI;AACF;AACA;;AAEA,kBAAGA,IAAH,EAAQ;AACNM,kBAAE,YAAW,KAAKxC,KAAL,CAAWyC,EAAtB,GAAyB,qBAA3B,EAAkDP,IAAlD,CAAuDA,IAAvD;AACD,eAFD,MAGI;AACFA,uBAAO,iHAAP;AACAM,kBAAE,YAAW,KAAKxC,KAAL,CAAWyC,EAAtB,GAAyB,qBAA3B,EAAkDP,IAAlD,CAAuDA,IAAvD;AACD;AAGF,aAbD,CAaE,OAAOQ,CAAP,EAAU;AAChB;AACM,mBAAKC,OAAL,GAAe,KAAKpE,IAAL,CAAUqE,WAAV,CAAsBV,IAAtB,CAAf;AACD;AACF;;;+CAEmB;AACtB;;AAEI,gBAAI,KAAKd,IAAT,EAAc;AACZ;AACN;;AAEM,mBAAK,IAAIH,IAAI,CAAb,EAAgBA,IAAI,KAAKG,IAAL,CAAUO,MAA9B,EAAsCV,GAAtC,EAA2C;;AAEvC,oBAAI4B,eAAe,KAAK7C,KAAL,CAAWH,cAAX,CAA0BoB,CAA1B,EAA6B6B,KAAhD;AACA,oBAAIC,eAAe,KAAK/C,KAAL,CAAWH,cAAX,CAA0BoB,CAA1B,EAA6BC,KAAhD;AACA,oBAAI8B,eAAe,KAAK5B,IAAL,CAAUH,CAAV,EAAaG,IAAb,CAAkB6B,WAAlB,CAA8B,CAA9B,CAAnB;AACV;;AAEU,oBAAGF,YAAH,EAAgB;AACdP,oBAAE,YAAW,KAAKxC,KAAL,CAAWyC,EAAtB,GAA2B,OAA3B,GAAqCM,YAAvC,EAAqDb,IAArD,CAA0D,KAAKd,IAAL,CAAUH,CAAV,EAAaC,KAAvE;AACD;AACD,oBAAG2B,YAAH,EAAgB;AACdL,oBAAE,YAAW,KAAKxC,KAAL,CAAWyC,EAAtB,GAA2B,OAA3B,GAAqCI,YAAvC,EAAqDX,IAArD,CAA0Dc,YAA1D;AACD;AACJ;AACF;;AAEL;AACI;AACD;;;wCAGaE,U,EAAY;AACxB,gBAAIvC,SAAS,IAAI3C,UAAJ,CAAe;AAC1BmF,0BAAYD,WAAWC,UADG;AAE1BhC,qBAAO+B,WAAWE;AAFQ,aAAf,CAAb;;AAKAzC,mBAAO0C,SAAP,GAAmB1C,OAAO2C,YAAP,CAAoB,KAAKtD,KAAL,CAAWT,aAA/B,CAAnB;AACA,mBAAOoB,MAAP;AACD;;;;QAvMkC9C,gB;;;;AA2MrCK,sBAAgBqF,WAAhB,GAA8B,aAA9B","file":"svg_annotate_ctrl.js","sourcesContent":["import {MetricsPanelCtrl} from 'app/plugins/sdk';\nimport _ from 'lodash';\nimport kbn from 'app/core/utils/kbn';\nimport TimeSeries from 'app/core/time_series';\nimport moment from 'moment';\nimport './css/svg-annotate-panel.css!';\n\n\nexport class SVGAnnotateCtrl extends MetricsPanelCtrl {\n  // constructor($scope, $injector, private templateSrv, private $sce) { \n  constructor($scope, $injector,$rootScope, templateSrv, $sce, $http, $filter) {\n    super($scope, $injector);\n    this.$rootScope = $rootScope;\n\n    var panelDefaults = {\n      method: 'GET',\n      errorMode: 'show',\n      params_js: \"{\\n\" +\n                 \" from:ctrl.range.from.format('x'),  // x is unix ms timestampppp???\\n\" +\n                 \" to:ctrl.range.to.format('x'), \\n\" +\n                 \" height:ctrl.height\\n\" +\n                 \"}\",\n      legend: {\n        show: true, // disable/enable legend\n        values: true\n      },\n      links: [],\n      datasource: null,\n      maxDataPoints: 3,\n      interval: null,\n      targets: [{}],\n      cacheTimeout: null,\n      nullPointMode: 'connected',\n      legendType: 'Under graph',\n      aliasColors: {},\n      format: 'short',\n      valueName: 'current',\n      imageUrl:\"\",\n      metricMappings:[],\n      span:4\n    };\n\n    this.$sce = $sce;\n    this.$http = $http;\n    this.templateSrv = templateSrv;\n\n    _.defaults(this.panel, panelDefaults);\n\n    this.events.on('init-edit-mode', this.onInitEditMode.bind(this));\n    this.events.on('render', this.onRender.bind(this));\n    this.events.on('data-received', this.onDataReceived.bind(this));\n    this.events.on('data-error', this.onDataError.bind(this));\n    this.events.on('panel-initialized', this.onPanelInitalized.bind(this));\n    this.events.on('refresh', this.onRefresh.bind(this));\n  }\n\n\n  onRefresh(){\n    // console.log(\"onRefresh()\")\n    this.replaceSVGContents();\n  }\n\n  onDataError() {\n//    console.log(\"onDataError\");\n    this.series = [];\n    this.replaceSVGContents();\n//    console.log(\"data error!\")\n  }\n\n  onInitEditMode() {\n//    console.log(\"onInitEditMode\");\n    // this.editorTabs.splice(1,1); // remove the 'Metrics Tab'\n    this.addEditorTab('Options', 'public/plugins/grafana-svg-annotate-panel/editor.html',1);\n    this.editorTabIndex = 1;\n  }\n\n  onPanelInitalized() {\n//    console.log(\"onPanelInitalized()\")\n    this.loadImage();\n  }\n\n  onRender() {\n//    console.log(\"onRender\");\n    this.loadImage();\n    this.replaceSVGContents()\n  }\n\n  parseSeries(series) {\n    return _.map(this.series, (serie, i) => {\n      return {\n        label: serie.alias,\n        data: serie.stats[this.panel.valueName],\n        color: this.panel.aliasColors[serie.alias] || this.$rootScope.colors[i]\n      };\n    });\n  }\n\n\n  onDataReceived(dataList) {\n//    console.log(\"dataList\", dataList)\n//    console.log(\"onDataReceived()\");\n\n    // parse data from grafana\n    this.series = dataList.map(this.seriesHandler.bind(this));\n    this.data = this.parseSeries(this.series);\n\n    // create data mappings if they don't already exist\n    if(this.panel.metricMappings.length != this.data.length){\n      for (var i = 0; i < this.data.length; i++) {\n        this.panel.metricMappings[i] = {label:\"\", data:\"\"};\n      }\n    }\n\n    this.replaceSVGContents();\n  }\n\n  loadImage(){\n//    console.log(\"loadImage\")\n    // load svg into panel\n    if(this.panel.imageUrl){\n\n      var params;\n      var self = this;\n\n      this.$http({\n        method: 'GET',\n        url: this.panel.imageUrl,\n        params: {}\n      }).then(function successCallback(response) {\n//        //console.log('success', response, this);\n//        console.log(\"successCallback()\")\n        var html = response.data;\n\n        self.updateContent( html );\n        self.replaceSVGContents();\n\n      }, function errorCallback(response) {\n        console.warn('error', response);\n        // var body = '<h1>Error</h1><pre>' + JSON.stringify(response, null, \" \") + \"</pre>\";\n        var body = \"<span class='warning-text'>Error loading source image url.</span>\";\n        self.updateContent(body);\n      });\n\n    }\n    else{\n      this.updateContent(\"\");\n    }\n  }\n\n  updateContent(html) {\n//    console.log(\"Panel: \"+ this.panel.id)\n//    console.log(\"updateContent()\")\n    try {\n      // sce not playing nice with jquery.  Just add raw html instead\n      // var content = this.$sce.trustAsHtml(this.templateSrv.replace(html, this.panel.scopedVars));\n\n      if(html){\n        $(\"#panel-\"+ this.panel.id+\" .svg-annotate-body\").html(html);\n      }\n      else{\n        html = \"<span class='warning-text'>No image specified. <br>Use the options panel to specify an image source URL.</span>\";\n        $(\"#panel-\"+ this.panel.id+\" .svg-annotate-body\").html(html);\n      }\n\n\n    } catch (e) {\n//      console.log('Text panel error: ', e);\n      this.content = this.$sce.trustAsHtml(html);\n    }\n  }\n\n  replaceSVGContents(){\n//    console.log(\"replaceSVGContents()\");\n\n    if (this.data){\n      // replace values in svg with data from grafana\n//      console.log(\"this in replaceSVGContents\", this)\n\n      for (var i = 0; i < this.data.length; i++) {\n\n          var valueMapping = this.panel.metricMappings[i].value;\n          var labelMapping = this.panel.metricMappings[i].label;\n          var roundedValue = this.data[i].data.toPrecision(4)\n//          console.log(\"replacing values in svg\")\n\n          if(labelMapping){\n            $(\"#panel-\"+ this.panel.id + \" svg \" + labelMapping).html(this.data[i].label)\n          }\n          if(valueMapping){\n            $(\"#panel-\"+ this.panel.id + \" svg \" + valueMapping).html(roundedValue)\n          }\n      }\n    }\n\n//    console.log(\"height\", this.height)\n    // this.panel.height=this.height;\n  }\n\n\n  seriesHandler(seriesData) {\n    var series = new TimeSeries({\n      datapoints: seriesData.datapoints,\n      alias: seriesData.target\n    });\n\n    series.flotpairs = series.getFlotPairs(this.panel.nullPointMode);\n    return series;\n  }\n\n}\n\nSVGAnnotateCtrl.templateUrl = 'module.html';"]}